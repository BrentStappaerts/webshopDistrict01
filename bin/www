#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webshop:server');
var http = require('http');
var User = require('../models/user');
var Product = require('../models/product');
var Bestelling = require('../models/bestelling');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket connections.
 */

var io = require('socket.io')(server);

io.on('connection', function(socket){
  console.log('user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });

  socket.on('addProduct', function(data){
    Product.create({type: data.type, product: data.product, merk: data.merk, prijs: data.prijs, foto: data.foto}, function(err, b){
      console.log('b', b);
    });
  });


  socket.on('findProducts', function(data){
    Product.find().exec(function(err, b){
      console.log('b', b);
      socket.emit('printProducts', b);
    });
  });

  socket.on('findBestellingen', function(data){
    Bestelling.find().exec(function(err, b){
      console.log('b', b);
      socket.emit('printBestelling', b);
    });
  });

  socket.on('findProductdetail', function(data){
    Product.find({_id: data.product}).exec(function(err, b){
      console.log('b', b);
      socket.emit('detail', b);
    });
  });

  socket.on('addBestelling', function(data){
    Bestelling.create({productid: data.productid, userid: data.userid, aantal: data.aantal, naam: data.naam, adres: data.adres}, function(err, b){
      console.log('b', b);
    });
  });

  socket.on('findOrder', function(data){
    Bestelling.find({userid: data.user}).exec(function(err, b){
      console.log('b', b);
      socket.emit('printOrders', b);
    });
  });

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server running on localhost:' + addr.port);
}
